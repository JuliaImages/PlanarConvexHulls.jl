var documenterSearchIndex = {"docs":
[{"location":"#Polygon.jl","page":"Home","title":"Polygon.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Polygon provides a ConvexHull type, which represents the convex hull of a set of 2D points by its extreme points. Functionality includes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"convexity test\nconstruction of a convex hull given a set of points\narea\ncentroid\npoint-in-convex-hull test\nclosest point within convex hull\nequivalent halfspace representation of the convex hull","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"#The-ConvexHull-type","page":"Home","title":"The ConvexHull type","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ConvexHull\nSConvexHull\nDConvexHull\nvertices\nnum_vertices","category":"page"},{"location":"#Polygon.ConvexHull","page":"Home","title":"Polygon.ConvexHull","text":"struct ConvexHull{O<:Polygon.VertexOrder, T, P<:StaticArraysCore.StaticArray{Tuple{2}, T, 1}, V<:AbstractArray{P<:StaticArraysCore.StaticArray{Tuple{2}, T, 1}, 1}}\n\nRepresents the convex hull of a set of 2D points by its extreme points (vertices), which are stored according to the VertexOrder given by the first type parameter.\n\n\n\n\n\n","category":"type"},{"location":"#Polygon.SConvexHull","page":"Home","title":"Polygon.SConvexHull","text":"SConvexHull{N, T}\n\nThe default statically-sized ConvexHull type. Backed by an SVector{N, SVector{2, T}} with vertices ordered counter-clockwise.\n\n\n\n\n\n","category":"type"},{"location":"#Polygon.DConvexHull","page":"Home","title":"Polygon.DConvexHull","text":"DConvexHull{N, T}\n\nThe default dynamically-sized ConvexHull type. Backed by a Vector{SVector{2, T}} with vertices ordered counter-clockwise.\n\n\n\n\n\n","category":"type"},{"location":"#Polygon.vertices","page":"Home","title":"Polygon.vertices","text":"vertices(hull)\n\n\nReturn the ConvexHull's (ordered) vector of vertices.\n\n\n\n\n\n","category":"function"},{"location":"#Polygon.num_vertices","page":"Home","title":"Polygon.num_vertices","text":"num_vertices(hull)\n\n\nReturn the number of vertices of the given ConvexHull.\n\n\n\n\n\n","category":"function"},{"location":"#VertexOrders","page":"Home","title":"VertexOrders","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Polygon.VertexOrder\nCCW\nCW","category":"page"},{"location":"#Polygon.VertexOrder","page":"Home","title":"Polygon.VertexOrder","text":"abstract type VertexOrder\n\nA VertexOrder represents the order in which the vertices of a ConvexHull are stored.\n\n\n\n\n\n","category":"type"},{"location":"#Polygon.CCW","page":"Home","title":"Polygon.CCW","text":"struct CCW <: Polygon.VertexOrder\n\nCounterclockwise vertex order.\n\n\n\n\n\n","category":"type"},{"location":"#Polygon.CW","page":"Home","title":"Polygon.CW","text":"struct CW <: Polygon.VertexOrder\n\nClockwise vertex order.\n\n\n\n\n\n","category":"type"},{"location":"#Algorithms","page":"Home","title":"Algorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"is_ordered_and_strongly_convex\njarvis_march!\narea\ncentroid\nBase.in(point::Polygon.PointLike, hull::ConvexHull)\nclosest_point\nhrep\nhrep!","category":"page"},{"location":"#Polygon.is_ordered_and_strongly_convex","page":"Home","title":"Polygon.is_ordered_and_strongly_convex","text":"is_ordered_and_strongly_convex(vertices, order)\n\n\nReturn whether vertices are ordered according to vertex order type O (a subtype of VertexOrder), and as a result strongly convex (see e.g. CGAL documentation for a definition of strong convexity).\n\n\n\n\n\n","category":"function"},{"location":"#Polygon.jarvis_march!","page":"Home","title":"Polygon.jarvis_march!","text":"jarvis_march!(hull, points)\n\n\nCompute the convex hull of points and store the result in hull using the Jarvis march (gift wrapping) algorithm. This algorithm has O(nh) complexity, where n is the number of points and h is the number of vertices of the convex hull.\n\n\n\n\n\n","category":"function"},{"location":"#Polygon.area","page":"Home","title":"Polygon.area","text":"area(hull)\n\n\nCompute the area of the given ConvexHull using the shoelace formula.\n\n\n\n\n\n","category":"function"},{"location":"#Polygon.centroid","page":"Home","title":"Polygon.centroid","text":"centroid(hull)\n\n\nCompute the centroid or geometric center of the given ConvexHull using the formulas given here.\n\n\n\n\n\n","category":"function"},{"location":"#Base.in-Tuple{StaticArraysCore.StaticArray{Tuple{2}, T, 1} where T, ConvexHull}","page":"Home","title":"Base.in","text":"in(point, hull)\n\n\nReturn whether point is in hull.\n\n\n\n\n\n","category":"method"},{"location":"#Polygon.closest_point","page":"Home","title":"Polygon.closest_point","text":"closest_point(p, hull)\n\n\nFind the closest point to p within hull. If p is inside hull, p itself is returned.\n\n\n\n\n\n","category":"function"},{"location":"#Polygon.hrep","page":"Home","title":"Polygon.hrep","text":"hrep(hull)\n\n\nReturn the equivalent halfspace representation of the convex hull, i.e. matrix A and vector b such that the set of points inside the hull is\n\nleft x mid A x le b right\n\nIf hull is backed by a statically sized vector of vertices, the output (A, b) will be statically sized as well. If the vector of vertices is additionally immutable (e.g., a StaticArrays.SVector), then hrep will not perform any dynamic memory allocation.\n\n\n\n\n\n","category":"function"},{"location":"#Polygon.hrep!","page":"Home","title":"Polygon.hrep!","text":"hrep!(A, b, hull)\n\n\nReturn the equivalent halfspace representation of the convex hull, i.e. matrix A and vector b such that the set of points inside the hull is\n\nleft x mid A x le b right\n\nThis function stores its output in the (mutable) matrix A and vector b.\n\n\n\n\n\n","category":"function"}]
}
